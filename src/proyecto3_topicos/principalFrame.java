/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto3_topicos;

import java.awt.BorderLayout;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.CellType;
import java.util.Iterator;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Sheet;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author AJMM
 */
public class principalFrame extends javax.swing.JFrame {

    /**
     * Creates new form principalFrame
     */
    String archivoSeleccionado;
    
    public principalFrame() {
        initComponents();
        
    }
    
    public void mostrarArchivoCSV(String archivo){
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graficasScrollPane = new javax.swing.JScrollPane();
        graficasPane = new javax.swing.JPanel();
        mostrarGraficasScrollPane = new javax.swing.JPanel();
        grafica1Panel = new javax.swing.JPanel();
        grafica2Panel = new javax.swing.JPanel();
        grafica3Panel = new javax.swing.JPanel();
        grafica4Panel = new javax.swing.JPanel();
        mostrarArchivoScrollPane = new javax.swing.JScrollPane();
        mostrarArchivoTable = new javax.swing.JTable();
        imprimirAPDFBoton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        crearBoton = new javax.swing.JButton();
        elegirArchivoBoton = new javax.swing.JButton();
        mostrarArchivoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graficasScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        graficasPane.setBackground(new java.awt.Color(255, 153, 153));

        mostrarGraficasScrollPane.setBackground(new java.awt.Color(255, 255, 204));

        javax.swing.GroupLayout grafica1PanelLayout = new javax.swing.GroupLayout(grafica1Panel);
        grafica1Panel.setLayout(grafica1PanelLayout);
        grafica1PanelLayout.setHorizontalGroup(
            grafica1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );
        grafica1PanelLayout.setVerticalGroup(
            grafica1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout grafica2PanelLayout = new javax.swing.GroupLayout(grafica2Panel);
        grafica2Panel.setLayout(grafica2PanelLayout);
        grafica2PanelLayout.setHorizontalGroup(
            grafica2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );
        grafica2PanelLayout.setVerticalGroup(
            grafica2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout grafica3PanelLayout = new javax.swing.GroupLayout(grafica3Panel);
        grafica3Panel.setLayout(grafica3PanelLayout);
        grafica3PanelLayout.setHorizontalGroup(
            grafica3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );
        grafica3PanelLayout.setVerticalGroup(
            grafica3PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout grafica4PanelLayout = new javax.swing.GroupLayout(grafica4Panel);
        grafica4Panel.setLayout(grafica4PanelLayout);
        grafica4PanelLayout.setHorizontalGroup(
            grafica4PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );
        grafica4PanelLayout.setVerticalGroup(
            grafica4PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mostrarGraficasScrollPaneLayout = new javax.swing.GroupLayout(mostrarGraficasScrollPane);
        mostrarGraficasScrollPane.setLayout(mostrarGraficasScrollPaneLayout);
        mostrarGraficasScrollPaneLayout.setHorizontalGroup(
            mostrarGraficasScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarGraficasScrollPaneLayout.createSequentialGroup()
                .addComponent(grafica1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grafica2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grafica3Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grafica4Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );
        mostrarGraficasScrollPaneLayout.setVerticalGroup(
            mostrarGraficasScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostrarGraficasScrollPaneLayout.createSequentialGroup()
                .addGroup(mostrarGraficasScrollPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(grafica4Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grafica1Panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grafica2Panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grafica3Panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 19, Short.MAX_VALUE))
        );

        mostrarArchivoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        mostrarArchivoScrollPane.setViewportView(mostrarArchivoTable);

        javax.swing.GroupLayout graficasPaneLayout = new javax.swing.GroupLayout(graficasPane);
        graficasPane.setLayout(graficasPaneLayout);
        graficasPaneLayout.setHorizontalGroup(
            graficasPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mostrarGraficasScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mostrarArchivoScrollPane)
        );
        graficasPaneLayout.setVerticalGroup(
            graficasPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, graficasPaneLayout.createSequentialGroup()
                .addComponent(mostrarArchivoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarGraficasScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        graficasScrollPane.setViewportView(graficasPane);

        imprimirAPDFBoton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        imprimirAPDFBoton.setText("IMPRIMIR A PDF");

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gráfica de telaraña", "Gráfica de dispersión", "Item 3", "Item 4" }));

        crearBoton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        crearBoton.setText("CREAR:");
        crearBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearBotonActionPerformed(evt);
            }
        });

        elegirArchivoBoton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        elegirArchivoBoton.setText("Elegir archivo...");
        elegirArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elegirArchivoBotonActionPerformed(evt);
            }
        });

        mostrarArchivoLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mostrarArchivoLabel.setText("Ningún archivo seleccionado...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(graficasScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(imprimirAPDFBoton)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(elegirArchivoBoton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mostrarArchivoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crearBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(crearBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(elegirArchivoBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mostrarArchivoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(graficasScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(imprimirAPDFBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crearBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearBotonActionPerformed
        // TODO add your handling code here:
        switch(this.jComboBox1.getSelectedIndex()){
            case 0:
                grafica1Panel.removeAll();//le quito el panel anterior
                
                grafica1Panel.setLayout(new BorderLayout());
                graficarWeb(grafica1Panel, archivoSeleccionado, "");
                break;
                
            case 1: 
                grafica2Panel.removeAll();
                scatterPlotChart();
                break;
        }
        
        this.graficasPane.revalidate();
    }//GEN-LAST:event_crearBotonActionPerformed

    private void elegirArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elegirArchivoBotonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);
        
        // Aplicar filtro para csv
         FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos (*.csv, *.xls, *.xlsx)" , "csv", "xls", "xlsx");
        fc.setFileFilter(filtro);
        int resultado = fc.showOpenDialog(null);
        
        if (resultado == JFileChooser.APPROVE_OPTION){
            this.mostrarArchivoLabel.setText(fc.getSelectedFile().getName());
            archivoSeleccionado = fc.getSelectedFile().getAbsolutePath();
            System.out.println(archivoSeleccionado);
            
            //si es csv
            if(fc.getSelectedFile().getName().endsWith("csv")){
                cargarCSVEnJTable(archivoSeleccionado, this.mostrarArchivoTable);
            }
            
            //si es xls
            
            if(fc.getSelectedFile().getName().endsWith("xls") || fc.getSelectedFile().getName().endsWith("xlsx")){
                cargarXLSEnTable(archivoSeleccionado, this.mostrarArchivoTable);
            }
            
        }
        
    }//GEN-LAST:event_elegirArchivoBotonActionPerformed
    
    public static void cargarCSVEnJTable(String archivoCSV, JTable table) {
        try (BufferedReader br = new BufferedReader(new FileReader(archivoCSV))) {
            //variables que necesito
            Vector<Vector<Object>> datosParaTable = new Vector<>();
            
            //leo todos los datos del csv
            String currLinea = "";
            int cuantasColumnas = 0;
            while ((currLinea = br.readLine()) != null) {
                Vector<Object> currVector = new Vector<>();
                
                //leo renglón
                for (Object currString : currLinea.split(",")) {
                    currVector.add(currString);
                }
                
                //actualizo cuantas columnas
                cuantasColumnas = Math.max(cuantasColumnas, currVector.size());
                
                //lo pongo en el vector de todos los datos
                datosParaTable.add(currVector);
            }
            
            // Le pongo nombres a las columnas de que 1,2,3,4,5 para que el usuario lo vea mas facil
            Vector<String> nombresColumnas = new Vector<>();
            for (int i = 0; i < cuantasColumnas; i++) {
                nombresColumnas.add("" + (i + 1));
            }
            
            //le pongo el modelo a la table
            table.setModel(new DefaultTableModel(datosParaTable, nombresColumnas));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getCause());
        }
    }
    
    public static void cargarXLSEnTable(String archivoExcell, JTable table){
        //si es xls, codigo conseguido de: https://howtodoinjava.com/java/library/readingwriting-excel-files-in-java-poi-tutorial/
        FileInputStream file = null;
        try {
            file = new FileInputStream(new File(archivoExcell));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Crear workbook
        XSSFWorkbook workbook = null;
        try {
            workbook = new XSSFWorkbook(file);
        } catch (IOException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Conseguir la primer sheet
        XSSFSheet sheet = workbook.getSheetAt(0);
        //explicacion de código conseguida de: https://poi.apache.org/components/spreadsheet/quick-guide.html?utm_source=chatgpt.com
        //necesito que sean vectores para darselos directo a el constructor del model
        Vector<Vector<Object>> datosParaTable = new Vector<>();
        int cuantasColumnas = 0;
        //recorro la sheet
        for (Row row : sheet) {
                Vector<Object> datosRenglon = new Vector<>();
                for (Cell cell : row) {
                    //dependiendo del tipo es como lo pido
                    switch (cell.getCellType()) {
                        case STRING:
                            datosRenglon.add(cell.getStringCellValue());
                            break;
                        case NUMERIC:
                            datosRenglon.add(cell.getNumericCellValue());
                            break;
                        case BOOLEAN:
                            datosRenglon.add(cell.getBooleanCellValue());
                            break;
                            
                        default: 
                            datosRenglon.add(""); //para las vacias
                            break;
                    }
                }
                //comparo la longitud de este renglon contra el mayor para conseguir cuantas columnas hay
                cuantasColumnas = Math.max(cuantasColumnas, datosRenglon.size());
                datosParaTable.add(datosRenglon);
            }

            // Le pongo nombres a las columnas de que 1,2,3,4,5 para que el usuario lo vea mas facil
            Vector<String> nombresColumnas = new Vector<>();
            for (int i = 0; i < cuantasColumnas; i++) {
                nombresColumnas.add("" + (i + 1));
            }

            //le pongo el modelo a la table
            table.setModel(new DefaultTableModel(datosParaTable, nombresColumnas));
    }
    
    public void graficarWeb(JPanel panelDondeGraficar, String documento, String titulo){
        int indiceDeRenglonDeEjes = 0;
        int indiceDeColumnaDeSeries = 0;
        
        //creo las estructuras de datos que necesitaré
        ArrayList<String> ejes = new ArrayList<>();
        Map<String,ArrayList<Integer>> seriesYValores = new HashMap<>();
        
        //conseguir los datos    
        //si es xls, codigo conseguido de: https://howtodoinjava.com/java/library/readingwriting-excel-files-in-java-poi-tutorial/
        FileInputStream file = null;
        try {
            file = new FileInputStream(new File(documento));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Crear workbook
        XSSFWorkbook workbook = null;
        try {
            workbook = new XSSFWorkbook(file);
        } catch (IOException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Conseguir la primer sheet
        XSSFSheet sheet = workbook.getSheetAt(0);
        //explicacion de código conseguida de: https://poi.apache.org/components/spreadsheet/quick-guide.html?utm_source=chatgpt.com

        // Conseguir los ejes
        for (int i = indiceDeRenglonDeEjes + 1; i < sheet.getRow(0).getPhysicalNumberOfCells(); i++) {
            ejes.add(sheet.getRow(indiceDeRenglonDeEjes).getCell(i).getStringCellValue());
        }

        // Conseguir los valores de las series
        // Iterar por las filas (en lugar de las columnas)
        for (int i = indiceDeRenglonDeEjes + 1; i < sheet.getPhysicalNumberOfRows(); i++) {
            ArrayList<Integer> currValores = new ArrayList<>();
            // Llenar este arrayList con valores de la fila actual
            for (int j = indiceDeColumnaDeSeries + 1; j < sheet.getRow(i).getPhysicalNumberOfCells(); j++) {
                currValores.add((int) sheet.getRow(i).getCell(j).getNumericCellValue());
            }

            seriesYValores.put(sheet.getRow(i).getCell(indiceDeColumnaDeSeries).getStringCellValue(), currValores);
        }
        //cerrar el xls
        try {    
            file.close();
            //si es csv      
        } catch (IOException ex) {
            Logger.getLogger(principalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //lleno el default category set
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        for (Map.Entry<String, ArrayList<Integer>> parSerieValores : seriesYValores.entrySet()) {
            for(int i = 0; i < parSerieValores.getValue().size(); i++){
                dataset.addValue(parSerieValores.getValue().get(i), parSerieValores.getKey(), ejes.get(i));
            }
        }
        
        //crear el plot
        SpiderWebPlot plot = new SpiderWebPlot(dataset);

        //crear la chart
        JFreeChart chart = new JFreeChart(titulo, JFreeChart.DEFAULT_TITLE_FONT, plot, false);
        chart.addSubtitle(new LegendTitle(chart.getPlot()));//necesito hace resto para que me muestre las series
        
        //crear la chartPanel
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setVisible(true);
        chartPanel.setPreferredSize(new Dimension(300,300));
        panelDondeGraficar.add(chartPanel);
        panelDondeGraficar.revalidate();
    }
    
     //FUNCIONES DE GRÁFICAS
    //crear el XYDataset
    public XYDataset createXYDataset(String titulo, int x, int y) {
        DefaultTableModel modelo = (DefaultTableModel) mostrarArchivoTable.getModel();
        
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries series = new XYSeries("Datos de la tabla");
        
        for(int i = 0; i < modelo.getRowCount(); i++) {
            try{
               double valX = Double.parseDouble(modelo.getValueAt(i, x).toString());
                double valY = Double.parseDouble(modelo.getValueAt(i, y).toString());
                series.add(valX, valY); 
            } catch(Exception ex){
                continue;
            }
            
        }
        dataset.addSeries(series);
        return dataset;
    }
    
    //Crear el scatterPlot
    public void scatterPlotChart(){
        int x = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el valor de x"));
        int y = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el valor de y"));
        String titulo = JOptionPane.showInputDialog("Ingrese el titulo");
        
       
        XYDataset ds = createXYDataset(titulo, x, y);
        
        JFreeChart chart = ChartFactory.createScatterPlot(titulo, "x", "y", ds, PlotOrientation.VERTICAL, true, true, false);
        
        ChartPanel cp = new ChartPanel(chart);
        cp.setPreferredSize(grafica2Panel.getSize());
        
        
        grafica2Panel.setLayout(new BorderLayout());
        grafica2Panel.add(cp, BorderLayout.CENTER);
        grafica2Panel.revalidate();
        grafica2Panel.repaint(); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principalFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton crearBoton;
    private javax.swing.JButton elegirArchivoBoton;
    private javax.swing.JPanel grafica1Panel;
    private javax.swing.JPanel grafica2Panel;
    private javax.swing.JPanel grafica3Panel;
    private javax.swing.JPanel grafica4Panel;
    private javax.swing.JPanel graficasPane;
    private javax.swing.JScrollPane graficasScrollPane;
    private javax.swing.JButton imprimirAPDFBoton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel mostrarArchivoLabel;
    private javax.swing.JScrollPane mostrarArchivoScrollPane;
    private javax.swing.JTable mostrarArchivoTable;
    private javax.swing.JPanel mostrarGraficasScrollPane;
    // End of variables declaration//GEN-END:variables
}
